// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: watermark.proto

package watermark

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetDocumentRequest struct {
	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *GetDocumentRequest) Reset()         { *m = GetDocumentRequest{} }
func (m *GetDocumentRequest) String() string { return proto.CompactTextString(m) }
func (*GetDocumentRequest) ProtoMessage()    {}
func (*GetDocumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc38f8f86e35d20d, []int{0}
}
func (m *GetDocumentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDocumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDocumentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDocumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDocumentRequest.Merge(m, src)
}
func (m *GetDocumentRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetDocumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDocumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDocumentRequest proto.InternalMessageInfo

func (m *GetDocumentRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *GetDocumentRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type GetDocumentResponse struct {
	Content   string `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Author    string `protobuf:"bytes,3,opt,name=Author,proto3" json:"Author,omitempty"`
	Topic     string `protobuf:"bytes,4,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Watermark string `protobuf:"bytes,5,opt,name=Watermark,proto3" json:"Watermark,omitempty"`
	Err       string `protobuf:"bytes,6,opt,name=Err,proto3" json:"Err,omitempty"`
}

func (m *GetDocumentResponse) Reset()         { *m = GetDocumentResponse{} }
func (m *GetDocumentResponse) String() string { return proto.CompactTextString(m) }
func (*GetDocumentResponse) ProtoMessage()    {}
func (*GetDocumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc38f8f86e35d20d, []int{1}
}
func (m *GetDocumentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDocumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDocumentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDocumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDocumentResponse.Merge(m, src)
}
func (m *GetDocumentResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDocumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDocumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDocumentResponse proto.InternalMessageInfo

func (m *GetDocumentResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *GetDocumentResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GetDocumentResponse) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *GetDocumentResponse) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *GetDocumentResponse) GetWatermark() string {
	if m != nil {
		return m.Watermark
	}
	return ""
}

func (m *GetDocumentResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type WatermarkRequest struct {
	TicketID string `protobuf:"bytes,1,opt,name=TicketID,proto3" json:"TicketID,omitempty"`
	Mark     string `protobuf:"bytes,2,opt,name=Mark,proto3" json:"Mark,omitempty"`
}

func (m *WatermarkRequest) Reset()         { *m = WatermarkRequest{} }
func (m *WatermarkRequest) String() string { return proto.CompactTextString(m) }
func (*WatermarkRequest) ProtoMessage()    {}
func (*WatermarkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc38f8f86e35d20d, []int{2}
}
func (m *WatermarkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatermarkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatermarkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatermarkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatermarkRequest.Merge(m, src)
}
func (m *WatermarkRequest) XXX_Size() int {
	return m.Size()
}
func (m *WatermarkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatermarkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatermarkRequest proto.InternalMessageInfo

func (m *WatermarkRequest) GetTicketID() string {
	if m != nil {
		return m.TicketID
	}
	return ""
}

func (m *WatermarkRequest) GetMark() string {
	if m != nil {
		return m.Mark
	}
	return ""
}

type WatermarkResponse struct {
	Code int32  `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Err  string `protobuf:"bytes,2,opt,name=Err,proto3" json:"Err,omitempty"`
}

func (m *WatermarkResponse) Reset()         { *m = WatermarkResponse{} }
func (m *WatermarkResponse) String() string { return proto.CompactTextString(m) }
func (*WatermarkResponse) ProtoMessage()    {}
func (*WatermarkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc38f8f86e35d20d, []int{3}
}
func (m *WatermarkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatermarkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatermarkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatermarkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatermarkResponse.Merge(m, src)
}
func (m *WatermarkResponse) XXX_Size() int {
	return m.Size()
}
func (m *WatermarkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatermarkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatermarkResponse proto.InternalMessageInfo

func (m *WatermarkResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *WatermarkResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type AddDocumentRequest struct {
	Content   string `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Author    string `protobuf:"bytes,3,opt,name=Author,proto3" json:"Author,omitempty"`
	Topic     string `protobuf:"bytes,4,opt,name=Topic,proto3" json:"Topic,omitempty"`
	Watermark string `protobuf:"bytes,5,opt,name=Watermark,proto3" json:"Watermark,omitempty"`
}

func (m *AddDocumentRequest) Reset()         { *m = AddDocumentRequest{} }
func (m *AddDocumentRequest) String() string { return proto.CompactTextString(m) }
func (*AddDocumentRequest) ProtoMessage()    {}
func (*AddDocumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc38f8f86e35d20d, []int{4}
}
func (m *AddDocumentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDocumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDocumentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDocumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDocumentRequest.Merge(m, src)
}
func (m *AddDocumentRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddDocumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDocumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddDocumentRequest proto.InternalMessageInfo

func (m *AddDocumentRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *AddDocumentRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AddDocumentRequest) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *AddDocumentRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *AddDocumentRequest) GetWatermark() string {
	if m != nil {
		return m.Watermark
	}
	return ""
}

type AddDocumentResponse struct {
	TicketID string `protobuf:"bytes,1,opt,name=TicketID,proto3" json:"TicketID,omitempty"`
	Err      string `protobuf:"bytes,2,opt,name=Err,proto3" json:"Err,omitempty"`
}

func (m *AddDocumentResponse) Reset()         { *m = AddDocumentResponse{} }
func (m *AddDocumentResponse) String() string { return proto.CompactTextString(m) }
func (*AddDocumentResponse) ProtoMessage()    {}
func (*AddDocumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc38f8f86e35d20d, []int{5}
}
func (m *AddDocumentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDocumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDocumentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDocumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDocumentResponse.Merge(m, src)
}
func (m *AddDocumentResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddDocumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDocumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddDocumentResponse proto.InternalMessageInfo

func (m *AddDocumentResponse) GetTicketID() string {
	if m != nil {
		return m.TicketID
	}
	return ""
}

func (m *AddDocumentResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func init() {
	proto.RegisterType((*GetDocumentRequest)(nil), "watermark.GetDocumentRequest")
	proto.RegisterType((*GetDocumentResponse)(nil), "watermark.GetDocumentResponse")
	proto.RegisterType((*WatermarkRequest)(nil), "watermark.WatermarkRequest")
	proto.RegisterType((*WatermarkResponse)(nil), "watermark.WatermarkResponse")
	proto.RegisterType((*AddDocumentRequest)(nil), "watermark.AddDocumentRequest")
	proto.RegisterType((*AddDocumentResponse)(nil), "watermark.AddDocumentResponse")
}

func init() { proto.RegisterFile("watermark.proto", fileDescriptor_fc38f8f86e35d20d) }

var fileDescriptor_fc38f8f86e35d20d = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0xd3, 0x24, 0x90, 0x09, 0x52, 0xd3, 0x29, 0x42, 0x26, 0x14, 0x83, 0x56, 0x3d, 0xa0,
	0x1e, 0x62, 0x09, 0x4e, 0x20, 0x2e, 0xf9, 0x13, 0x20, 0xc4, 0x25, 0xaa, 0x40, 0xea, 0xcd, 0x8d,
	0x87, 0xc4, 0x6a, 0xec, 0x0d, 0xeb, 0x31, 0xd0, 0x2b, 0x4f, 0x50, 0x89, 0x47, 0xe0, 0x65, 0x38,
	0x56, 0xe2, 0xc2, 0x11, 0x25, 0x3c, 0x08, 0xf2, 0xda, 0x71, 0xd6, 0x4d, 0xe1, 0xca, 0x6d, 0xbf,
	0x99, 0xf1, 0xf7, 0x33, 0x1a, 0xc3, 0xee, 0x27, 0x8f, 0x49, 0x85, 0x9e, 0x3a, 0xeb, 0x2e, 0x94,
	0x64, 0x89, 0xcd, 0xa2, 0xd0, 0x19, 0x4d, 0x03, 0x9e, 0x25, 0xa7, 0xdd, 0x89, 0x0c, 0xdd, 0x90,
	0xd8, 0xfb, 0x48, 0x2a, 0x26, 0x97, 0x55, 0x12, 0xc7, 0xae, 0x4f, 0xef, 0x59, 0x11, 0xb9, 0x53,
	0x29, 0xa7, 0x73, 0xe2, 0x59, 0xa0, 0xfc, 0x85, 0xa7, 0xf8, 0xdc, 0xf5, 0xa2, 0x48, 0xb2, 0xc7,
	0x81, 0x8c, 0xe2, 0x8c, 0x51, 0x3c, 0x07, 0x7c, 0x41, 0x3c, 0x94, 0x93, 0x24, 0xa4, 0x88, 0xc7,
	0xf4, 0x21, 0xa1, 0x98, 0xb1, 0x0d, 0x3b, 0xaf, 0xe9, 0xdc, 0xb6, 0x1e, 0x5a, 0x8f, 0x9a, 0xe3,
	0xf4, 0x89, 0xb7, 0xa1, 0xfe, 0xd6, 0x9b, 0x27, 0x64, 0x57, 0x75, 0x2d, 0x03, 0xe2, 0x9b, 0x05,
	0xfb, 0xa5, 0xcf, 0xe3, 0x85, 0x8c, 0x62, 0x42, 0x1b, 0x6e, 0x0c, 0x64, 0xc4, 0x14, 0x71, 0xce,
	0xb1, 0x86, 0x29, 0xcf, 0x71, 0xc0, 0xf3, 0x82, 0x47, 0x03, 0xbc, 0x03, 0x8d, 0x5e, 0xc2, 0x33,
	0xa9, 0xec, 0x1d, 0x5d, 0xce, 0x91, 0x9e, 0x96, 0x8b, 0x60, 0x62, 0xd7, 0xf2, 0xe9, 0x14, 0xe0,
	0x01, 0x34, 0xdf, 0xad, 0xf7, 0x60, 0xd7, 0x75, 0x67, 0x53, 0x48, 0xbd, 0x8f, 0x94, 0xb2, 0x1b,
	0x99, 0xf7, 0x91, 0x52, 0xa2, 0x0f, 0xed, 0xa2, 0xbd, 0x4e, 0xd8, 0x81, 0x9b, 0xc7, 0xc1, 0xe4,
	0x8c, 0xf8, 0xd5, 0x30, 0xb7, 0x58, 0x60, 0x44, 0xa8, 0xbd, 0x49, 0xa9, 0x33, 0x8b, 0xfa, 0x2d,
	0x9e, 0xc2, 0x9e, 0xc1, 0x91, 0xc7, 0x44, 0xa8, 0x0d, 0xa4, 0x4f, 0x9a, 0xa0, 0x3e, 0xd6, 0xef,
	0xb5, 0x7c, 0x75, 0x23, 0x7f, 0x61, 0x01, 0xf6, 0x7c, 0xff, 0xea, 0x8e, 0xff, 0xe3, 0x8e, 0xc4,
	0x00, 0xf6, 0x4b, 0x8e, 0xf2, 0x3c, 0xff, 0x5a, 0xca, 0x56, 0xae, 0xc7, 0xcb, 0xaa, 0xa1, 0x81,
	0x21, 0xb4, 0x8c, 0x4b, 0xc0, 0xfb, 0xdd, 0xcd, 0xed, 0x6e, 0x1f, 0x58, 0xc7, 0xf9, 0x5b, 0x3b,
	0x73, 0x22, 0x1e, 0x7c, 0xf9, 0xf1, 0xfb, 0x6b, 0xf5, 0x2e, 0x36, 0x5d, 0x3f, 0x6f, 0x9d, 0xdc,
	0x42, 0x28, 0x80, 0x8b, 0x9f, 0xa1, 0x65, 0x24, 0x28, 0xc9, 0x6d, 0xef, 0xba, 0x24, 0x77, 0x4d,
	0x70, 0x71, 0xa4, 0xe5, 0x0e, 0xfb, 0x7b, 0x50, 0x7b, 0x39, 0xea, 0x0d, 0x4d, 0xd9, 0x5d, 0x61,
	0xc8, 0x3e, 0xb3, 0x8e, 0x70, 0x6e, 0xa6, 0xbe, 0x67, 0x10, 0x5f, 0xbd, 0xb1, 0xce, 0xc1, 0xf5,
	0xcd, 0x5c, 0xf3, 0x50, 0x6b, 0x3a, 0x02, 0xdc, 0x62, 0xea, 0xa4, 0x2d, 0x5a, 0x1b, 0x94, 0xaa,
	0xf5, 0xed, 0xef, 0x4b, 0xc7, 0xba, 0x5c, 0x3a, 0xd6, 0xaf, 0xa5, 0x63, 0x5d, 0xac, 0x9c, 0xca,
	0xe5, 0xca, 0xa9, 0xfc, 0x5c, 0x39, 0x95, 0xd3, 0x86, 0xfe, 0x81, 0x9f, 0xfc, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x60, 0x7d, 0x3d, 0x7c, 0x25, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WatermarkClient is the client API for Watermark service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WatermarkClient interface {
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	AddDocument(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*AddDocumentResponse, error)
	Watermark(ctx context.Context, in *WatermarkRequest, opts ...grpc.CallOption) (*WatermarkResponse, error)
}

type watermarkClient struct {
	cc *grpc.ClientConn
}

func NewWatermarkClient(cc *grpc.ClientConn) WatermarkClient {
	return &watermarkClient{cc}
}

func (c *watermarkClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, "/watermark.Watermark/GetDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watermarkClient) AddDocument(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*AddDocumentResponse, error) {
	out := new(AddDocumentResponse)
	err := c.cc.Invoke(ctx, "/watermark.Watermark/AddDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *watermarkClient) Watermark(ctx context.Context, in *WatermarkRequest, opts ...grpc.CallOption) (*WatermarkResponse, error) {
	out := new(WatermarkResponse)
	err := c.cc.Invoke(ctx, "/watermark.Watermark/Watermark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WatermarkServer is the server API for Watermark service.
type WatermarkServer interface {
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	AddDocument(context.Context, *AddDocumentRequest) (*AddDocumentResponse, error)
	Watermark(context.Context, *WatermarkRequest) (*WatermarkResponse, error)
}

// UnimplementedWatermarkServer can be embedded to have forward compatible implementations.
type UnimplementedWatermarkServer struct {
}

func (*UnimplementedWatermarkServer) GetDocument(ctx context.Context, req *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (*UnimplementedWatermarkServer) AddDocument(ctx context.Context, req *AddDocumentRequest) (*AddDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDocument not implemented")
}
func (*UnimplementedWatermarkServer) Watermark(ctx context.Context, req *WatermarkRequest) (*WatermarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Watermark not implemented")
}

func RegisterWatermarkServer(s *grpc.Server, srv WatermarkServer) {
	s.RegisterService(&_Watermark_serviceDesc, srv)
}

func _Watermark_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatermarkServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watermark.Watermark/GetDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatermarkServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watermark_AddDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatermarkServer).AddDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watermark.Watermark/AddDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatermarkServer).AddDocument(ctx, req.(*AddDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Watermark_Watermark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatermarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WatermarkServer).Watermark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/watermark.Watermark/Watermark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WatermarkServer).Watermark(ctx, req.(*WatermarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Watermark_serviceDesc = grpc.ServiceDesc{
	ServiceName: "watermark.Watermark",
	HandlerType: (*WatermarkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDocument",
			Handler:    _Watermark_GetDocument_Handler,
		},
		{
			MethodName: "AddDocument",
			Handler:    _Watermark_AddDocument_Handler,
		},
		{
			MethodName: "Watermark",
			Handler:    _Watermark_Watermark_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "watermark.proto",
}

func (m *GetDocumentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDocumentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDocumentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintWatermark(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintWatermark(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDocumentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDocumentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDocumentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintWatermark(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Watermark) > 0 {
		i -= len(m.Watermark)
		copy(dAtA[i:], m.Watermark)
		i = encodeVarintWatermark(dAtA, i, uint64(len(m.Watermark)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintWatermark(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintWatermark(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintWatermark(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintWatermark(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatermarkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatermarkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatermarkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mark) > 0 {
		i -= len(m.Mark)
		copy(dAtA[i:], m.Mark)
		i = encodeVarintWatermark(dAtA, i, uint64(len(m.Mark)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TicketID) > 0 {
		i -= len(m.TicketID)
		copy(dAtA[i:], m.TicketID)
		i = encodeVarintWatermark(dAtA, i, uint64(len(m.TicketID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatermarkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatermarkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatermarkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintWatermark(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintWatermark(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddDocumentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDocumentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDocumentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Watermark) > 0 {
		i -= len(m.Watermark)
		copy(dAtA[i:], m.Watermark)
		i = encodeVarintWatermark(dAtA, i, uint64(len(m.Watermark)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintWatermark(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintWatermark(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintWatermark(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintWatermark(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddDocumentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDocumentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDocumentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintWatermark(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TicketID) > 0 {
		i -= len(m.TicketID)
		copy(dAtA[i:], m.TicketID)
		i = encodeVarintWatermark(dAtA, i, uint64(len(m.TicketID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWatermark(dAtA []byte, offset int, v uint64) int {
	offset -= sovWatermark(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetDocumentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovWatermark(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovWatermark(uint64(l))
	}
	return n
}

func (m *GetDocumentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovWatermark(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovWatermark(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovWatermark(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovWatermark(uint64(l))
	}
	l = len(m.Watermark)
	if l > 0 {
		n += 1 + l + sovWatermark(uint64(l))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovWatermark(uint64(l))
	}
	return n
}

func (m *WatermarkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TicketID)
	if l > 0 {
		n += 1 + l + sovWatermark(uint64(l))
	}
	l = len(m.Mark)
	if l > 0 {
		n += 1 + l + sovWatermark(uint64(l))
	}
	return n
}

func (m *WatermarkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovWatermark(uint64(m.Code))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovWatermark(uint64(l))
	}
	return n
}

func (m *AddDocumentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovWatermark(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovWatermark(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovWatermark(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovWatermark(uint64(l))
	}
	l = len(m.Watermark)
	if l > 0 {
		n += 1 + l + sovWatermark(uint64(l))
	}
	return n
}

func (m *AddDocumentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TicketID)
	if l > 0 {
		n += 1 + l + sovWatermark(uint64(l))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovWatermark(uint64(l))
	}
	return n
}

func sovWatermark(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWatermark(x uint64) (n int) {
	return sovWatermark(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetDocumentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatermark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDocumentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDocumentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatermark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatermark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatermark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatermark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatermark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatermark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDocumentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatermark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDocumentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDocumentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatermark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatermark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatermark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatermark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatermark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatermark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatermark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatermark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watermark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatermark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatermark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Watermark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatermark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatermark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatermark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatermark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatermarkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatermark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatermarkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatermarkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatermark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatermark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TicketID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatermark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatermark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatermark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatermark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatermarkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatermark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatermarkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatermarkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatermark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatermark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatermark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatermark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDocumentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatermark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDocumentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDocumentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatermark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatermark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatermark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatermark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatermark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatermark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatermark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatermark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Watermark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatermark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatermark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Watermark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatermark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatermark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDocumentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWatermark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDocumentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDocumentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatermark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatermark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TicketID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWatermark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWatermark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWatermark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWatermark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWatermark(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWatermark
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWatermark
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWatermark
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWatermark
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWatermark
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWatermark        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWatermark          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWatermark = fmt.Errorf("proto: unexpected end of group")
)
